// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
  schema="LibraryDB"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL") // uses connection pooling
  
}

model User {
  id                    Int       @id @default(autoincrement())
  firstName             String
  lastName              String
  idNumber              String    @unique
  isStudent             Boolean
  createdAt             DateTime  @default(now()) @map(name: "created_at")
  updatedAt             DateTime  @updatedAt @map(name: "updated_at")
  currentReadingLevel   String
  email                 String    @unique
  checkedOutBooks       Rentals?

  accountPrivileges     Priviliges?  @relation("UserPrivileges")

  @@map(name: "users")
}

model Book {
  id              Int            @id @default(autoincrement())
  isbn            String                 
  title           String

  shelfLocation   String
  bookLevel       String
  bookLevelColor  String

  // Checkouts
  rented          Rentals?       @relation("BookCheckedOut", fields: [rentalId], references: [id])
  rentalId        Int?         

  // Reservations  
  reservedBy      Reservation?   @relation(fields: [reservationId], references: [id])
  reservationId   Int?
  
  @@map(name: "books")
}

model Author {
  id            Int         @id @default(autoincrement())
  firstName     String    
  lastName      String

  @@map(name: "authors")
}

model Reservation {
  id                      Int          @id @default(autoincrement())
  booksReserved           Book[]
  bookId                  Int?
  pending                 Boolean
  reservationAt           DateTime?    @default(now()) @map(name: "reservation_at")
  reservationFulfilled    DateTime?    @default(now()) @map(name: "reservation_fulfilled_at")
  @@map(name: "reservations")
}

model Priviliges {
  id                Int         @id @default(autoincrement())
  checkoutBooks     Boolean
  checkinBooks      Boolean
  addBooks          Boolean
  removeBooks       Boolean
  moveAccounts      Boolean
  userAccount       User        @relation("UserPrivileges", fields:[userId], references: [id])
  userId            Int         @unique
}

model Rentals {
  id                  Int            @id @default(autoincrement())
  booksOut            Book[]         @relation("BookCheckedOut")
  checkedOut          Boolean        @default(false)
  checkedOutAt        DateTime?      @default(now())
  dueDate             DateTime?      
  checkedInAt         DateTime?      @default(now())

  checkedOutBy        User           @relation(fields: [borrowerId], references: [id]) 
  borrowerId          Int            @unique 
}