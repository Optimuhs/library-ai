generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
  schema          = "LibraryDB"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  firstName           String
  lastName            String
  idNumber            String      @unique
  isStudent           Boolean
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  currentReadingLevel String
  email               String      @unique
  accountPrivileges   Priviliges? @relation("UserPrivileges")


  @@map("users")
}

model Book {
  id             Int          @id @default(autoincrement())
  title          String
  reservationId  Int?
  bookLevel      String
  bookLevelColor String
  rentalId       Int?         @unique 
  shelfLocation  String
  isbn           String
  rented         Rentals?     @relation("BookCheckedOut", fields: [rentalId], references: [id])
  reservedBy     Reservation? @relation(fields: [reservationId], references: [id])

  @@map("books")
}

model Author {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String

  @@map("authors")
}

model Reservation {
  id                   Int       @id @default(autoincrement())
  bookId               Int?
  pending              Boolean
  reservationAt        DateTime? @default(now()) @map("reservation_at")
  reservationFulfilled DateTime? @default(now()) @map("reservation_fulfilled_at")
  booksReserved        Book[]

  @@map("reservations")
}

model Priviliges {
  id            Int     @id @default(autoincrement())
  checkoutBooks Boolean
  checkinBooks  Boolean
  addBooks      Boolean
  removeBooks   Boolean
  moveAccounts  Boolean
  userId        Int     @unique
  userAccount   User    @relation("UserPrivileges", fields: [userId], references: [id])
}

model Rentals {
  id           Int        @id @default(autoincrement())
  checkedOut   Boolean    @default(false)
  checkedOutAt DateTime  @default(now())
  dueDate      DateTime
  checkedInAt  DateTime  @default(now())
  borrowerId   Int        
  bookOut      Book?      @relation("BookCheckedOut")

  booksOutId   Int     // Array of book IDs in the rental
  bookISBN     String
  @@map("rentals")
}

